{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/displayGamesSearchReducer.js","redux/reducers/prepareInstanceReducer.js","redux/reducers/setPlayersReducers.js","redux/reducers/currentInstanceReducer.js","redux/reducers/previousStatsReducer.js","redux/reducers/getDataReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/getGamesSaga.js","redux/sagas/gameSaga.js","redux/sagas/setUserPlayerSaga.js","redux/sagas/assignCategorySaga.js","redux/sagas/dataVisSaga.js","redux/sagas/index.js","components/ActionMenu/ActionMenu.js","components/NavBar/NavBar.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/DataChart/DataChart.js","components/UserPage/UserPage.js","components/AddGameCards/AddGameCards.js","components/AddGame/AddGame.js","components/InstanceCard/InstanceCard.js","components/DataChart/GameChart.js","components/GamePage/GamePage.js","components/FriendSearch/FriendSearch.js","components/ActivePlayers/ActivePlayers.js","components/InstancePage/InstancePage.js","components/EnterScores/EnterScores.js","components/ResultsPage/ResultsPage.js","components/DataChart/CategoryChart.js","components/CategoryPage/CategoryPage.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","displayGamesSearch","prepareInstance","setPlayers","Object","toConsumableArray","concat","currentInstanceId","previousStats","users","notes","scores","getData","rootReducer","errors","user","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","fetchGames","getGamesSaga","call","newGame","getGamesSaga_marked","getGamesSaga_marked2","addNewGame","fetchCurrentGame","getStats","selectGame","createInstance","setInstance","addGamesSaga","name","gameSaga_marked","id","gameSaga_marked2","allScores","allUsers","firstResponse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","instance_id","noteLine","statLine","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","each","Symbol","iterator","done","value","username","score","return","finish","t1","t2","gameSaga_marked3","_context4","_marked4","_context5","_marked5","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","player","_context6","players","instance","_marked6","_context7","_marked7","addUserToGame","playCurrentUserSaga","setUserPlayerSaga_marked","setUserPlayerSaga_marked2","handleCategory","assignCategorySaga","category","game","assignCategorySaga_marked","assignCategorySaga_marked2","getCategoryData","getGameData","getAllData","dataVisSaga","wins","dataVisSaga_marked","dataVisSaga_marked2","dataVisSaga_marked3","dataVisSaga_marked4","rootSaga","all","gameSaga","sagas_marked","NestedList","open","requestOpen","search","query","requests","handleClick","_this","setState","handleRequestClick","handleChange","event","target","then","catch","error","alert","sendRequest","getRequests","handleRequest","confirmAlert","title","message","buttons","label","onClick","acceptRequest","declineRequest","delete","_this2","classes","props","react_default","createElement","className","root","List_default","ListItem_default","button","ListItemIcon_default","AttachMoney_default","ListItemText_default","inset","primary","Send_default","PersonAdd_default","ExpandLess_default","ExpandMore_default","Collapse_default","in","timeout","unmountOnExit","component","disablePadding","nested","Search_default","Input_default","onChange","placeholder","map","key","AddCircle_default","Mail_default","RemoveCircle_default","React","Component","withStyles","theme","width","maxWidth","backgroundColor","palette","background","paper","paddingLeft","spacing","unit","connect","_ref","liveSearchFriends","createMuiTheme","main","secondary","PrimarySearchAppBar","anchorEl","anchorEl2","handleProfileMenuOpen","currentTarget","handleActionMenuOpen","logOut","dispatch","handleMenuClose","handleMenuClose2","handleSearchClick","searchGames","isMenuOpen","Boolean","isMenuOpen2","renderMenu","Menu_default","anchorOrigin","vertical","horizontal","transformOrigin","onClose","MenuItem_default","renderMenu2","ActionMenu","core_styles","AppBar_default","position","color","Toolbar_default","IconButton_default","menuButton","aria-label","aria-owns","aria-haspopup","icons_Menu_default","Typography_default","variant","noWrap","searchIcon","InputBase_default","inputRoot","input","inputInput","grow","sectionDesktop","Link","to","Home_default","Category_default","AccountCircle_default","index","Games_default","game_name","flexGrow","marginLeft","marginRight","defineProperty","display","breakpoints","up","borderRadius","shape","fade","common","white","&:hover","height","pointerEvents","alignItems","justifyContent","paddingTop","paddingRight","paddingBottom","transition","transitions","create","sectionMobile","LoginPage","password","login","preventDefault","handleInputChangeFor","propertyName","Paper_default","role","onSubmit","Button_default","size","RegisterPage","htmlFor","ComponentToShow","ComponentToProtect","otherProps","objectWithoutProperties","Route","assign","DataChart","react_chartjs_2_es","labels","datasets","options","text","fontSize","legend","UserPage","newGameClick","history","push","components_DataChart_DataChart","card","media","objectFit","Card_default","CardActionArea_default","CardMedia_default","alt","image","image_url","CardContent_default","gutterBottom","AddGame","addGameClick","reduxState","handleSubmit","AddGameCards","game_image","GamePage","submitCategory","playGameClick","InstanceCard","GameChart","maintainAspectRatio","moment","date_played","format","scales","yAxes","ticks","beginAtZero","FriendSearch","addToInstance","ActivePlayers","InstancePage","startGameClick","components_FriendSearch_FriendSearch","components_ActivePlayers_ActivePlayers","EnterScores","winner","setScore","Switch_default","ResultsPage","saveResultsClick","components_EnterScores_EnterScores","CategoryPage","games","categories","getRequestedGames","displayGameClick","_this3","InputLabel_default","Select_default","category_name","CategoryChart","App","HashRouter","NavBar_NavBar","Switch","Redirect","exact","from","components_ProtectedRoute_ProtectedRoute","path","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.56bc312a.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","//this holds the response from the BGG API that displays on the addGamePage\nconst displayGamesSearch = (state = [], action) => {\n    switch (action.type) {\n      case 'DISPLAY_SEARCH':\n        return  action.payload;\n      default:\n        return state;\n    }\n  };\n\n  export default displayGamesSearch;\n  ","//this holds the current games image and id information for display and\n//data logging purposes\nconst prepareInstance = (state = {}, action) => {\n    switch (action.type) {\n      case 'DISPLAY_CURRENT_GAME':\n        return  action.payload;\n      default:\n        return state;\n    }\n  };\n\n  export default prepareInstance;\n  ","//this empties the active users and sets the active players\n//with each new game\nconst setPlayers = (state = [], action) => {\n    switch (action.type) {\n      case 'SET_PLAYERS':\n        return  [...state, action.payload];\n      case 'RESET_PLAYERS':\n        return [];\n      default:\n        return state;\n    }\n  };\n\n  export default setPlayers;\n  ","//this reducer holds on to the current instance id\nconst currentInstanceId = (state = {}, action) => {\n    switch (action.type) {\n      case 'STORE_INSTANCE_ID':\n        return  action.payload;\n      default:\n        return state;\n    }\n  };\n\n  export default currentInstanceId;\n  ","//this holds the data used to generate the bar charts on the game page\nconst previousStats = (state = {users: [], notes: [], scores: []}, action) => {\n    switch (action.type) {\n      case 'SET_PREVIOUS_STATS':\n        return  action.payload;\n      default:\n        return state;\n    }\n  };\n\n  export default previousStats;\n  ","//this holds the stats for whatever page the user is on\n//and is used to display the various pie charts\nconst getData = (state = [], action) => {\n    switch (action.type) {\n      case 'SET_DATA':\n        return  action.payload;\n      default:\n        return state;\n    }\n  };\n\n  export default getData;\n  ","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport displayGamesSearch from './displayGamesSearchReducer';\nimport prepareInstance from './prepareInstanceReducer';\nimport setPlayers from './setPlayersReducers';\nimport currentInstanceId from './currentInstanceReducer';\nimport previousStats from './previousStatsReducer';\nimport getData from './getDataReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  displayGamesSearch,\n  prepareInstance,\n  setPlayers,\n  currentInstanceId,\n  previousStats,\n  getData,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n//this function hits the board game API that allows users to search \n//for and add board games to the DB\nfunction* fetchGames(action) {\n    try{\n        const response = yield call(axios.post, '/api/games', {data: action.payload} );\n        yield put({ type: 'DISPLAY_SEARCH', payload: response.data.newGame})\n    }\n    catch (error) {\n        console.log('error searching api');\n    }\n}\n\nfunction* getGamesSaga() {\n    yield takeLatest('FETCH_GAMES', fetchGames);\n  }\n\n  export default getGamesSaga;","import { takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n//this is the main saga, where most of the information flows through.\n\n//this function sends a game from the API to the DB, then it dispatches actions\n//to create a new instance in the DB, as well as to set the current game\nfunction* addNewGame(action) {\n    try{\n        yield call(axios.post, '/myGames', {data: action.payload} );\n        const response = yield call(axios.get, `/myGames/${action.payload.name}`);\n        yield put({type: 'CREATE_NEW_INSTANCE', payload: response.data[0]});\n        yield put({type: 'FETCH_CURRENT_GAME'});\n    }\n    catch (error) {\n        console.log('error adding new game');\n    }\n};\n\n//this gets the game with the most recently created instance, specific to each user\n//then gets stats for that game, and sets it to display\nfunction* fetchCurrentGame() {\n    try{\n        const response = yield call(axios.get, '/myGames/current')\n        yield put({type: 'DISPLAY_CURRENT_GAME', payload: response.data[0]});\n        yield put({type: 'GET_PREVIOUS_STATS', payload: response.data[0].id});\n    }\n    catch (error) {\n        console.log('error retrieving game');\n    }\n};\n\n//this saga handles getting previous stats for a game\n//it formats the data in a usable way, and then dispatches it to the redux store\n//to be displayed on the gamepage in bar chart form.\nfunction* getStats(action) {\n        let notes = [];\n        let users = [];\n        let scores = [];\n        let allScores = [];\n        let allUsers = [];\n    try{\n        const firstResponse = yield call(axios.get, `/previous/${action.payload}`);\n        for(let instance_id of firstResponse.data){\n            let noteLine = yield call(axios.get, `/previous/notes/${instance_id.id}`);\n            let statLine = yield call(axios.get, `/previous/stats/${instance_id.id}`);\n            for( let each of statLine.data ) {\n                users = [...users, each.username];\n                scores = [...scores, each.score];\n            };\n            notes =  [...notes, noteLine.data[0]];\n            allScores = [...allScores, scores];\n            allUsers = [...allUsers, users];\n            scores = [];\n            users = [];\n        };\n        yield put({type: 'SET_PREVIOUS_STATS', payload: {\n            notes: notes,\n            users: allUsers,\n            scores: allScores\n        }});\n               \n    }\n    catch (error) {\n        console.log('error getting 3');\n    }\n};\n\n//sets the current one click from the user, gets the stats and the data\nfunction* selectGame(action) {\n    try{\n        const response = yield call(axios.get, `/existingGames/${action.payload.id}`);\n        yield put({type: 'DISPLAY_CURRENT_GAME', payload: response.data[0]});\n        yield put({type: 'GET_GAME_DATA', payload: response.data[0].id});\n        yield put({type: 'GET_PREVIOUS_STATS', payload: response.data[0].id});\n    }\n    catch (error) {\n        console.log('error retrieving existing game');\n    }\n};\n\n\n//creates a new instance and posts it to the DB\nfunction* createInstance(action) {\n    try{\n        yield call(axios.post, '/instance',  action.payload);\n    }\n    catch (error) {\n        console.log('error adding new instance');\n    }\n};\n\n//sets the instance id to the redux store for reference by the client\nfunction* setInstance(action) {\n    try{\n        const response = yield call (axios.get, '/instance');\n        console.log(response);\n        for(let player of action.payload.players){\n            yield call(axios.post, '/stats', { players: player, instance: response.data});\n        }\n        yield put({type: 'STORE_INSTANCE_ID', payload: response.data[0]})\n    }\n    catch (error) {\n        console.log('error adding user to instance');\n    }\n};\n\n\nfunction* addGamesSaga() {\n    yield takeLatest('ADD_NEW_GAME', addNewGame);\n    yield takeLatest('CREATE_NEW_INSTANCE', createInstance);\n    yield takeLatest('SET_INSTANCE', setInstance);\n    yield takeLatest('FETCH_CURRENT_GAME', fetchCurrentGame);\n    yield takeLatest('GET_PREVIOUS_STATS', getStats);\n    yield takeLatest('SELECT_GAME', selectGame);\n  }\n\n  export default addGamesSaga;","import { takeLatest, put } from 'redux-saga/effects';\n\n//this function resets any existing players when a new game is selected,\n//then adds the current user in as an active player\nfunction* addUserToGame(action) {\n    console.log('in set user');\n    try{\n        yield put({ type: 'RESET_PLAYERS'})\n        yield put({ type: 'SET_PLAYERS', payload: action.payload})\n    }\n    catch (error) {\n        console.log('error adding user to instance');\n    }\n}\n\nfunction* playCurrentUserSaga() {\n    yield takeLatest('SET_USER_PLAYER', addUserToGame);\n  }\n\n  export default playCurrentUserSaga;","import { takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n//this saga takes an incoming string, searches for categories by that name,\n//and returns all categories found.\n//if a category by the name exists, it adds the current game to that category.\n//if not, it first creates the category, then adds the game to it.\nfunction* handleCategory(action) {\n    try{\n        const response = yield call(axios.get, `/category/check/${action.payload.category}` );\n        if(response.data.length < 1){\n            yield call(axios.post, '/category', {data: action.payload.category});\n        }\n        yield call(axios.put, `/category`, {category: action.payload.category, game: action.payload.game});\n    }\n    catch (error) {\n        console.log('error handling categories');\n    }\n}\n\nfunction* assignCategorySaga() {\n    yield takeLatest('ASSIGN_CATEGORY', handleCategory);\n  }\n\n  export default assignCategorySaga;","import { takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n//these sagas handle getting data for the pie charts.\n//they are called either for all the data on the user page,\n//the category data, or the game data, depending on the view\n//the user is currently on\n//then they dispatch the data to the redux store to be displayed.\n\nfunction* getCategoryData(action) {\n    let wins = [];\n    let users = [];\n    try{\n        const response = yield call(axios.get, `/stats/category/${action.payload}` );\n        for( let each of response.data ) {\n            wins = [...wins, each.wins];\n            users = [...users, each.username];\n        }\n        yield put({type: 'SET_DATA', payload: {wins: wins, users: users}});\n    }\n    catch (error) {\n        console.log('error getting data');\n    }\n}\n\nfunction* getGameData(action) {\n    let wins = [];\n    let users = [];\n    try{\n        const response = yield call(axios.get, `/stats/game/${action.payload}`);\n        for( let each of response.data ) {\n            wins = [...wins, each.wins];\n            users = [...users, each.username];\n        }\n        yield put({type: 'SET_DATA', payload: {wins: wins, users: users}});\n    }\n    catch (error) {\n        console.log('error getting game data');\n    }\n}\n\nfunction* getAllData() {\n    let wins = [];\n    let users = [];\n    try{\n        const response = yield call(axios.get, '/stats/all');\n        for( let each of response.data ) {\n            wins = [...wins, each.wins];\n            users = [...users, each.username];\n        }\n        yield put({type: 'SET_DATA', payload: {wins: wins, users: users}});\n    }\n    catch (error) {\n        console.log('error getting all data');\n    }\n}\n\nfunction* dataVisSaga() {\n    yield takeLatest('GET_CATEGORY_DATA', getCategoryData);\n    yield takeLatest('GET_ALL_DATA', getAllData);\n    yield takeLatest('GET_GAME_DATA', getGameData);\n  }\n\n  export default dataVisSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport getGamesSaga from './getGamesSaga';\nimport gameSaga from './gameSaga';\nimport playCurrentUserSaga from './setUserPlayerSaga';\nimport assignCategorySaga from './assignCategorySaga';\nimport dataVisSaga from './dataVisSaga';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    getGamesSaga(),\n    gameSaga(),\n    playCurrentUserSaga(),\n    assignCategorySaga(),\n    dataVisSaga(),\n  ]);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport Search from '@material-ui/icons/Search';\nimport SendIcon from '@material-ui/icons/Send';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport PersonAdd from '@material-ui/icons/PersonAdd';\nimport Input from '@material-ui/core/Input';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport RemoveCircle from '@material-ui/icons/RemoveCircle';\nimport Mail from '@material-ui/icons/Mail';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport AttachMoney from '@material-ui/icons/AttachMoney';\n\n//This component displays when the hamburger menu is clicked.\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing.unit * 4,\n  },\n});\n\nclass NestedList extends React.Component {\n  state = {\n    open: false,\n    requestOpen: false,\n    search: [],\n    query: '',\n    requests: []\n  };\n\n    handleClick = () => {\n        this.setState(state => ({ open: !state.open }));\n     };\n\n    handleRequestClick = () => {\n        this.setState(state => ({ requestOpen: !state.requestOpen}))\n    };\n\n    //handles live search feature when searching for users to add as friends.\n    handleChange = (event) => {\n        if(event.target.value){\n            axios.get(`/friends/${event.target.value}`)\n            .then((response) => {\n                this.setState({search: response.data})\n            })\n            .catch((error) => {\n                alert('error searching for friends');\n            })\n            this.setState({query: event.target.value})\n        }\n        this.setState({query: event.target.value, search: []})\n     }//end live search\n\n     //dispatches information to add users as friends\n     sendRequest = (user) => {\n         this.setState({ search: [], query: ''});\n         axios.post('/friends', {data: user.id})\n         .then(() => {\n            alert(`Friend request sent to ${user.username}!`)\n         })\n         .catch(()=> {\n             alert('Oops, something went wrong. Try again later.')\n         })\n     }//end send request\n\n    //gets outstanding friend requests for individual user on render of menu\n    componentDidMount(){\n        this.getRequests();\n    }//end lifecycle method\n\n    //extention of above, handles GET request to bring in friend requests.\n    getRequests = () => {\n        axios.get('/friends/requests')\n        .then((response) => {\n            this.setState({requests: response.data})\n        })\n        .catch((error) => {\n            alert('error getting friend requests');\n        })\n    }//end getRequests\n\n    //Confirmation popup when accepting or deleting a friend request\n    handleRequest = (user) => {\n        confirmAlert({\n            title:`Friend request from: ${user.username}`,\n            message: 'Do want to accept this request?',\n            buttons: [\n                {\n                    label: 'Accept',\n                    onClick: () => this.acceptRequest(user),\n                },\n                {\n                    label: 'Decline',\n                    onClick: () => this.declineRequest(user)\n                },\n                {\n                    label: 'Decide Later'\n                }\n            ]\n        })\n    };\n\n    //handles accepting requests\n    acceptRequest = (user) => {\n        axios.put(`/friends/${user.id}`)\n        .then(() => {\n            axios.post('/friends/requests', {data: user.id})\n            .then(() => {\n                alert(`You are now friends with ${user.username}!`);\n            })\n            .catch(() => {\n                alert(`Something went wrong, please try again later.`);\n            })\n            this.getRequests();\n        })  \n        .catch(() => {\n            alert(`Something went wrong, please try again later.`)\n        })\n    };\n\n    //handles deleting requests\n    declineRequest = (user) => {\n        axios.delete(`/friends/${user.id}`)\n        .then(() => {\n            alert(`You will not be connected with ${user.username}.`);\n            this.getRequests();\n        })\n        .catch(() => {\n            alert(`Something went wrong, please try again later`)\n        })\n    };//end popup handler\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>   \n        <List>\n          <ListItem button>\n            <ListItemIcon>\n              <AttachMoney />\n            </ListItemIcon>\n            <ListItemText inset primary=\"Make Wager\" />\n          </ListItem>\n          <ListItem button>\n            <ListItemIcon>\n                <SendIcon />\n            </ListItemIcon>\n            <ListItemText inset primary=\"Send Message\" />\n          </ListItem>\n          <ListItem button onClick={this.handleClick}>\n            <ListItemIcon>\n                <PersonAdd />\n            </ListItemIcon>\n            <ListItemText inset primary=\"Add Friend\" />\n            {this.state.open ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n                <ListItem button className={classes.nested}>\n                <ListItemIcon>\n                  <Search />\n                </ListItemIcon>\n                    <Input onChange={this.handleChange} type=\"search\" \n                    placeholder=\"Username\" value={this.state.query}/>\n                </ListItem>\n                {this.state.search.map( user => (\n                    <ListItem button key={user.username} onClick={() => this.sendRequest(user)}>\n                        <ListItemIcon><AddCircle/></ListItemIcon>\n                        <ListItemText inset primary={user.username}/>\n                    </ListItem>\n                  ))}\n            </List>\n          </Collapse>\n          <ListItem button onClick={this.handleRequestClick}>\n            <ListItemIcon>\n                <Mail/>\n            </ListItemIcon>\n            <ListItemText inset primary=\"Friend Requests\" />\n            {this.state.requestOpen ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={this.state.requestOpen} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n                {this.state.requests.map( user => (\n                    <ListItem button key={user.username} onClick={() => this.handleRequest(user)}>\n                        <ListItemIcon><AddCircle/></ListItemIcon>\n                        <ListItemIcon><RemoveCircle/></ListItemIcon>\n                        <ListItemText inset primary={user.username}/>\n                    </ListItem>\n                ))}\n            </List>\n          </Collapse>\n        </List>     \n      </div>\n    );\n  }\n}\n\nNestedList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = ({liveSearchFriends}) => ({liveSearchFriends});\n\nexport default withStyles(styles)(connect(mapStateToProps)(NestedList));","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport { connect } from 'react-redux';\nimport Home from '@material-ui/icons/Home';\nimport { Link } from 'react-router-dom';\nimport './NavBar.css';\nimport Category from '@material-ui/icons/Category';\nimport ActionMenu from '../ActionMenu/ActionMenu';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Games from '@material-ui/icons/Games';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\n//this component handles the styles and functions of the AppBar/NavBar\n//which is included on every page\n//it handles the positioning of the two popup menues, and the navigiation \n//onClick of each of the icons, as well as the live search feature\n//which is similar to those used for users and friends, but searches for a\n//users exisiting games.\n\n//TODO: componentize this to have a cleaner look, and be easier to change\n//and understand\n\nconst theme = createMuiTheme ({\n  palette: {\n    primary: {\n      main: '#b2102f',\n    },\n    secondary: {\n      main: '#ffffff'\n    }\n  }\n});\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing.unit * 2,\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing.unit * 3,\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing.unit * 9,\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n    width: '100%',\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  },\n  sectionDesktop: {\n    display: 'none',\n    [theme.breakpoints.up('md')]: {\n      display: 'flex',\n    },\n  },\n  sectionMobile: {\n    display: 'flex',\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n});\n\nclass PrimarySearchAppBar extends React.Component {\n  state = {\n    anchorEl: null,\n    anchorEl2: null,\n    query: '',\n    search: [],\n  };\n\n  handleProfileMenuOpen = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  handleActionMenuOpen = event => {\n    if(this.props.state.user.id){\n      this.setState({ anchorEl2: event.currentTarget });\n    }\n  }\n\n  logOut = () => {\n      this.props.dispatch({type: 'LOGOUT'});\n  };\n\n  handleMenuClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n  handleMenuClose2 = () => {\n    this.setState({ anchorEl2: null})\n  };\n\n  handleSearchClick = (game) => {\n    this.props.dispatch({type: 'SELECT_GAME', payload: game});\n    this.props.dispatch({type: 'SET_USER_PLAYER', payload: this.props.state.user});\n    this.setState({\n      query: '',\n      search: []\n    })\n  }\n\n  searchGames = (event) => {\n    if(event.target.value){\n        axios.get(`/myGames/search/${event.target.value}`)\n        .then((response) => {\n            this.setState({search: response.data})\n        })\n        .catch((error) => {\n            alert('error searching for games');\n        })\n        this.setState({query: event.target.value})\n    }\n    this.setState({query: event.target.value, search: []});\n };\n\n  render() {\n    const { anchorEl } = this.state;\n    const { classes } = this.props;\n    const isMenuOpen = Boolean(anchorEl);\n    const { anchorEl2 } = this.state;\n    const isMenuOpen2 = Boolean(anchorEl2);\n\n    const renderMenu = (\n      <Menu\n        anchorEl={anchorEl}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        open={isMenuOpen}\n        onClose={this.handleMenuClose}\n      >\n        <MenuItem onClick={this.logOut}>Logout</MenuItem>\n      </Menu>\n    );\n\n    const renderMenu2 = (\n      <Menu\n        anchorEl={anchorEl2}\n        anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n        open={isMenuOpen2}\n        onClose={this.handleMenuClose2}\n      >\n        <ActionMenu />\n      </Menu>\n    );\n\n    return (\n      <div className={classes.root}>\n        <MuiThemeProvider theme={theme}>\n        <AppBar position=\"static\" color='primary'>\n          <Toolbar>\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Open drawer\"\n            aria-owns={isMenuOpen2 ? 'material-appbar' : undefined}\n            aria-haspopup=\"true\"\n            onClick={this.handleActionMenuOpen}>\n              <MenuIcon />\n            </IconButton>\n            <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\n              Boast\n            </Typography>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon />\n              </div>\n              <InputBase\n                onChange={this.searchGames}\n                value={this.state.query}\n                placeholder=\"Search Games\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n              />\n            </div>\n            <div className={classes.grow} />\n            <div className={classes.sectionDesktop}>\n              <IconButton color=\"inherit\">\n                  <Link className=\"nav-link\" to=\"/home\">\n                    <Home />\n                  </Link>\n              </IconButton>\n              <IconButton color=\"inherit\">\n                  <Link className=\"nav-link\" to=\"/categories\">\n                    <Category />\n                  </Link>\n              </IconButton>\n              <IconButton\n                aria-owns={isMenuOpen ? 'material-appbar' : undefined}\n                aria-haspopup=\"true\"\n                onClick={this.handleProfileMenuOpen}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n        </MuiThemeProvider> \n        <List>\n          {this.state.search.map( (game, index) => (\n            <div key={index}>\n              <Link className=\"nav-link\" to=\"/gamepage\">\n              <ListItem button onClick={() => this.handleSearchClick(game)}>\n                <ListItemIcon>\n                  <Games/>\n                </ListItemIcon>\n                <ListItemText>\n                  {game.game_name}\n                </ListItemText>\n              </ListItem>\n              </Link>\n            </div>\n          ))}\n          </List>\n        {renderMenu2}\n        {renderMenu}\n      </div>\n    );\n  }\n}\n\nPrimarySearchAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(withStyles(styles)(PrimarySearchAppBar));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '@material-ui/core/Input';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\n//this component handles the user log in functionality\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n\n  //dispatches the login action if the username and password fields are filled\n  //or returns an error if they are incorrectly filled\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  //handles the change of the input fields\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (  \n        <Paper>\n          {this.props.errors.loginMessage && (\n            <h2\n              className=\"alert\"\n              role=\"alert\"\n            >\n              {this.props.errors.loginMessage}\n            </h2>\n          )}\n          <center>\n          <form onSubmit={this.login} id=\"setCategory\">\n            <h1>Login</h1>\n            <div>\n                <Input\n                  type=\"text\"\n                  name=\"username\"\n                  placeholder=\"username\"\n                  value={this.state.username}\n                  onChange={this.handleInputChangeFor('username')}\n                />\n            </div>\n            <div>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"password\"\n                  value={this.state.password}\n                  onChange={this.handleInputChangeFor('password')}\n                />\n            </div>\n            <div>\n              <Button\n                size=\"large\"\n                id=\"loginB\"\n                type=\"submit\"\n                variant=\"contained\"\n                \n              >Log In</Button>\n            </div>\n          </form>\n          </center>\n          <center>\n            <Button\n              id=\"loginB\"\n              size=\"large\"\n              color=\"secondary\"\n              variant=\"contained\"\n              onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n            >\n              Register\n            </Button>\n          </center>\n        </Paper>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\n//this component handles user registration, adding \n//their username and password to the database, and then dispatches the login\n//action using the new users credentials.\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\n\n//handles the creation of a pie chart on the user page\n\nclass DataChart extends Component {\n\n  render() {\n    return (\n        <div id=\"taco\">\n            <Pie\n                data={{\n                    labels: this.props.state.getData.users,\n                    datasets: [\n                        {\n                        \n                            data: \n                            this.props.state.getData.wins\n                        ,\n                        backgroundColor: [\n                            'purple',\n                            'gold',\n                            'aqua',\n                            'green',\n                            'red',\n                            'blue',\n                            'orange',\n                            'indigo',\n                            'yellow',\n                            'violet',\n                        ]\n                    }\n                ]\n            }}\n            height={100}\n            \n            options={{\n                title:{\n                    display:true,\n                    text: 'Wins/Losses',\n                    fontSize:25\n                },\n                legend:{\n                    display:true,\n                    position: 'bottom',\n                    \n                }\n            }}\n        />\n        </div>\n    )}\n}\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(DataChart);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './UserPage.css';\nimport DataChart from '../DataChart/DataChart';\nimport Button from '@material-ui/core/Button';\n\nclass UserPage extends Component {\n\n    //handles getting the users total wins, as well as all users they have\n    //shared instances with\n    componentDidMount() {\n      this.props.dispatch({type: 'GET_ALL_DATA'})\n    };\n\n    //navigates the user to the API search view onClick\n    newGameClick = () => {\n        this.props.history.push('/addgame')\n    };\n\n    render() {\n        return (\n          <div >\n            <div>\n              <h1 id=\"welcome\">\n                Hello, { this.props.state.user.username }!\n              </h1>\n            </div>\n            <div id=\"playThis\">\n              <Button onClick={this.newGameClick} size=\"large\" variant=\"contained\">Start New Game</Button>\n            </div>\n            <div id=\"frontChart\">\n              <DataChart />\n            </div>\n          </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(UserPage);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\n//Material-UI styling to display incoming games from API\n//as cards on the DOM to be selected by the user.\n\nconst styles = {\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    objectFit: 'cover',\n  },\n};\n\nfunction ImgMediaCard(props) {\n  const { classes } = props;\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt={props.game.name}\n          className={classes.media}\n          height=\"auto\"\n          image={props.game.image_url}\n          title={props.game.name}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {props.game.name}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nImgMediaCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ImgMediaCard);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Input from '@material-ui/core/Input';\nimport AddGameCards from '../AddGameCards/AddGameCards';\n\nclass AddGame extends Component {\n\n    state = {\n        query: '',\n    }\n\n    //dispatches action to add new game from BGG API into user's existing games\n    //this also sets the current user as a player for the existing game\n    //additionally, this moves the user to the next page where\n    //they can initiate a play instance\n    addGameClick = (game) => {\n        this.props.history.push('/playgame');\n        this.props.dispatch({type: 'ADD_NEW_GAME', payload: game});\n        this.props.dispatch({type: 'SET_USER_PLAYER', payload: this.props.reduxState.user});\n    }//end click handler\n\n    //handles sending the API request to the server, and thereby to the API\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.dispatch({type: 'FETCH_GAMES', payload: this.state.query})\n    };//end submit\n\n    //handles changing state to update on change within the search bar.\n    handleChange = (event) => {\n        this.setState({\n            query: event.target.value\n        })\n    };//end changr handler\n\n\n    render() {\n        return (\n        <div>\n\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <Input onChange={this.handleChange} type=\"search\" \n                    placeholder=\"Search for games\" value={this.state.query}/>\n                </form>\n            </div>\n            <div className=\"gameList\">\n                {this.props.reduxState.displayGamesSearch.map( game => (\n                    <div key={game.id} onClick={() => this.addGameClick(game)}>\n                        <AddGameCards game={game}/>\n                    </div>\n                ))}\n            </div>\n        </div>\n        );\n    }\n}\n\nconst mapStateToProps = reduxState => ({reduxState});\n\nexport default connect(mapStateToProps)(AddGame);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport {connect} from 'react-redux';\n\n//this component, which is very similar to the addGameCards,\n//handles the display of the current game on the DOM, using Material UI\n\nconst styles = {\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    objectFit: 'cover',\n  },\n};\n\nfunction ImgMediaCard(props) {\n  const { classes } = props;\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt={props.state.prepareInstance.game_name}\n          className={classes.media}\n          height=\"auto\"\n          image={props.state.prepareInstance.game_image}\n          title={props.state.prepareInstance.game_name}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {props.state.prepareInstance.game_name}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nImgMediaCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({state});\n\nexport default withStyles(styles)(connect(mapStateToProps)(ImgMediaCard));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\n\n//handles the creation of a pie chart on the game page\n\nclass DataChart extends Component {\n\n  render() {\n    return (\n        <div id=\"taco\">\n            <Pie\n                data={{\n                    labels: this.props.state.getData.users,\n                    datasets: [\n                        {\n                        \n                            data: \n                            this.props.state.getData.wins\n                        ,\n                        backgroundColor: [\n                            'purple',\n                            'gold',\n                            'aqua',\n                            'green',\n                            'red',\n                            'blue',\n                            'orange',\n                            'indigo',\n                            'yellow',\n                            'violet',\n                        ]\n                    }\n                ]\n            }}\n            height={300}\n            \n            options={{\n                title:{\n                    display:true,\n                    text: 'Wins/Losses',\n                    fontSize:25\n                },\n                legend:{\n                    display:true,\n                    position: 'bottom',\n                    \n                }\n            }}\n        />\n        </div>\n    )}\n}\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(DataChart);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport InstanceCard from '../InstanceCard/InstanceCard';\nimport Input from '@material-ui/core/Input';\nimport GameChart from '../DataChart/GameChart';\nimport { Bar } from 'react-chartjs-2';\nimport moment from 'moment';\nimport Button from '@material-ui/core/Button';\n\n//this component displays an individual game, and previous stats for the current user\n\nclass GamePage extends Component {\n\n    state = {\n        category: ''\n    }\n\n    //handles change for setting a game to a category\n    handleChange = (event) => {\n        this.setState({\n            category: event.target.value\n        })\n    };\n\n    //handles the submission of a category string to the database\n    submitCategory = (event) => {\n        event.preventDefault();\n        this.props.dispatch({type: 'ASSIGN_CATEGORY', payload: {\n            category: this.state.category,\n            game: this.props.state.prepareInstance.id\n            }\n        });\n        this.setState({category: ''})\n    };\n\n    //sends the user to the instance page, and creates a new instance in the DB\n    playGameClick = () => {\n        this.props.history.push('/playgame');\n        this.props.dispatch({type: 'CREATE_NEW_INSTANCE', payload: this.props.state.prepareInstance})\n    };\n\n    //renders stats for charts on mount\n    componentDidMount() {\n            this.props.dispatch({type: 'GET_PREVIOUS_STATS', payload: this.props.state.prepareInstance.id});\n            this.props.dispatch({type: 'GET_GAME_DATA', payload: this.props.state.prepareInstance.id});\n    };\n\n\n    //this is the JSX for the game card, borrowed from another component, as well\n    //as the charts, which are rendered individually for each dataset sent back from the DB,\n    //up to 3 unique datasets\n    //additionally, this renders the pie chart, borrowed from a different component\n    render() {\n        return (\n            <div className=\"fullPage\">    \n                <div id=\"instanceCard\">\n                    {this.props.state.prepareInstance && <InstanceCard />}\n                    <form id=\"setCategory\" onSubmit={this.submitCategory}>\n                        <Input onChange={this.handleChange} type=\"text\" \n                        placeholder=\"Assign Category\" value={this.state.category}/>\n                    </form>\n                </div>\n                <div id=\"buttonAndPie\">\n                    <Button onClick={this.playGameClick} size=\"large\" variant=\"contained\">Play Now!</Button>\n                    <div>\n                        <GameChart/>\n                    </div>\n                </div>\n                <div  id='barChart' >\n                    <h2 id=\"previousR\">Previous Results:</h2>\n                    {this.props.state.previousStats.notes.map( (noteLine, index) => (\n                        <div key={index}>\n                            <div >\n                                <Bar\n                                    data={{\n                                        labels: this.props.state.previousStats.users[index],\n                                        datasets: [\n                                            {\n                                                data: this.props.state.previousStats.scores[index],\n                                                backgroundColor: ['purple','gold','aqua','green','red','blue','orange','indigo','yellow','violet',],\n                                                label: 'Scores'\n                                            }\n                                        ]\n                                    }}\n                                    height={200}\n                                    options={{\n                                        maintainAspectRatio: false,\n                                        title:{\n                                            display:true,\n                                            text: moment(noteLine.date_played).format('MMM Do YY'),\n                                            fontSize:25\n                                        },\n                                        legend:{\n                                            display:true,\n                                            position: 'bottom'\n                                        },\n                                        scales: {\n                                            yAxes: [{\n                                                ticks: {\n                                                    beginAtZero: true\n                                                } \n                                            }]\n                                        },\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    ))}\n                </div>\n             </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(GamePage);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Search from '@material-ui/icons/Search';\nimport Input from '@material-ui/core/Input';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n//this component handles the live search of exisiting friends,\n//specific to each user, in order to add them to the current game\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing.unit * 4,\n  },\n});\n\nclass FriendSearch extends React.Component {\n  state = {\n    search: [],\n    query: '',\n  };\n\n  //handles live search, mostly reused from the ActionMenu live search\n    handleChange = (event) => {\n        if(event.target.value){\n            axios.get(`/friends/instance/${event.target.value}`)\n            .then((response) => {\n                this.setState({search: response.data})\n            })\n            .catch((error) => {\n                alert('error searching for friends');\n            })\n            this.setState({query: event.target.value})\n        }\n        this.setState({query: event.target.value, search: []})\n    };\n\n    //adds selected user to active players\n    addToInstance = (user) => {\n        this.props.dispatch({type: 'SET_PLAYERS', payload: user});\n        this.setState({\n            search: [],\n            query: ''\n        })\n    };\n    \n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <List component=\"nav\">\n            <ListItem button className={classes.nested}>\n            <ListItemIcon>\n                <Search />\n            </ListItemIcon>\n                <Input onChange={this.handleChange} type=\"search\" \n                placeholder=\"Add Players\" value={this.state.query}/>\n            </ListItem>\n            {this.state.search.map( user => (\n                <ListItem button key={user.username} onClick={() => this.addToInstance(user)}>\n                    <ListItemIcon><AddCircle/></ListItemIcon>\n                    <ListItemText inset primary={user.username}/>\n                </ListItem>\n            ))}\n        </List>\n      </div>\n    );\n  }\n}\n\nFriendSearch.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n\nexport default withStyles(styles)(connect()(FriendSearch));","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {connect} from 'react-redux';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n//component to handle list of current players for any given instance,\n//information handled in redux-store\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing.unit * 4,\n  },\n});\n\nclass ActivePlayers extends React.Component { \n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <List component=\"nav\">\n            {this.props.state.setPlayers.map( user => (\n                <ListItem key={user.username} >\n                    <ListItemText inset primary={user.username}/>\n                </ListItem>\n            ))}\n        </List>\n      </div>\n    );\n  }\n}\n\nActivePlayers.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({state});\n\nexport default withStyles(styles)(connect(mapStateToProps)(ActivePlayers));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport InstanceCard from '../InstanceCard/InstanceCard';\nimport FriendSearch from '../FriendSearch/FriendSearch';\nimport ActivePlayers from '../ActivePlayers/ActivePlayers';\nimport Button from '@material-ui/core/Button';\n\nclass InstancePage extends Component {\n\n    componentDidMount() {\n        if(this.props.state.setPlayers.length < 1){\n            this.props.dispatch({type: 'SET_USER_PLAYER', payload: this.props.state.user})\n        }\n    }\n\n    startGameClick = () => {\n        this.props.dispatch({\n            type: 'SET_INSTANCE',\n            payload: {\n                players: this.props.state.setPlayers\n            }\n        })\n        this.props.history.push('/results');\n    }\n\n    render() {\n        return (\n            <div className=\"fullPage\">   \n                <div id=\"instanceCard\">\n                    <InstanceCard />\n                </div>\n                <div id=\"addPlayers\">\n                    <FriendSearch />\n                    <div id=\"startButton\">\n                        <Button onClick={this.startGameClick} size=\"large\" variant=\"contained\">Start Game</Button>\n                    </div>\n                </div>\n                <div id=\"activePlayers\">\n                    <h2>Active Players:</h2>\n                    <ActivePlayers />\n                </div>\n            </div>\n        );\n    }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(InstancePage);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {connect} from 'react-redux';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport Input from '@material-ui/core/Input';\nimport Switch from '@material-ui/core/Switch';\nimport './EnterScores.css';\nimport axios from 'axios';\n\n//this component handles the score entering and dispatching to the server\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing.unit * 4,\n  },\n});\n\nclass EnterScores extends React.Component { \n\n    state = {\n        user: this.props.user,\n        winner: false, \n        score: ''\n    };\n\n    //handles the slider for setting winners or losers.\n    handleChange = () => {\n        this.setState ({\n            winner: !this.state.winner\n        })\n    };\n\n    //on change, sets the input box to reflect the entered score\n    setScore = (event) => {\n        this.setState({score: event.target.value})\n    };\n\n    //sets stats for the current game on unmount, to account for users not always clicking\n    //through to the next view.\n    componentWillUnmount() {\n        axios.put(`/stats/${this.props.state.currentInstanceId.id}`, this.state);    \n    };\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div className={classes.root}>\n                <div className=\"playerResults\" key={this.props.user.username}>\n                    <Input value={this.state.score} onChange={this.setScore}/>\n                    <ListItem>\n                        <ListItemText inset primary={this.props.user.username}/>\n                    </ListItem>\n                    <Switch value=\"checked\" onChange={this.handleChange} />\n                </div>\n            </div>\n        );\n    }\n}\n\nEnterScores.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({state});\n\nexport default withStyles(styles)(connect(mapStateToProps)(EnterScores));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport InstanceCard from '../InstanceCard/InstanceCard';\nimport EnterScores from '../EnterScores/EnterScores';\nimport List from '@material-ui/core/List';\nimport Button from '@material-ui/core/Button';\n\n//this component is the results page, where the user enters the scores for\n//for all active players and sets winers and losers.\n//This component doesn't really do much, but it hosts the InstanceCard\n//and EnterScores components, which do most of the heavy work here.\n\nclass ResultsPage extends Component {\n\n    saveResultsClick = () => {\n        this.props.history.push('/gamepage');\n    }\n\n    render() {\n        return (\n            <div className=\"fullPage\">   \n                <div id=\"instanceCard\">\n                    <InstanceCard />\n                </div>\n                <div>\n                <Button onClick={this.saveResultsClick} size=\"large\" variant=\"contained\">Save Results</Button>\n                </div>\n                <div id=\"activePlayers\">\n                    <div id=\"enterScores\">\n                        <h3>Input Scores</h3>\n                        <h3>Players</h3>\n                        <h3>Winner(s)</h3>\n                    </div>\n                    <List>\n                        {this.props.state.setPlayers.map(player => (\n                            <EnterScores key={player.id} user={player}/>\n                        ))}\n                    </List>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(ResultsPage);\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\n\n//handles the creation of a pie chart on the category page\n\nclass DataChart extends Component {\n\n  render() {\n    return (\n        <div id=\"chart\">\n            <Pie\n                data={{\n                    labels: this.props.state.getData.users,\n                    datasets: [\n                        {\n                            data: \n                            this.props.state.getData.wins\n                        ,\n                        backgroundColor: [\n                            'purple',\n                            'gold',\n                            'aqua',\n                            'green',\n                            'red',\n                            'blue',\n                            'orange',\n                            'indigo',\n                            'yellow',\n                            'violet',\n                        ]\n                    }\n                ]\n            }}\n            height={400}\n            \n            options={{\n                title:{\n                    display:false,\n                    text: 'Are you even good?',\n                    fontSize:25\n                },\n                legend:{\n                    display:true,\n                    position: 'bottom'\n                }\n            }}\n        />\n        </div>\n    )}\n}\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(DataChart);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport AddGameCards from '../AddGameCards/AddGameCards';\nimport axios from 'axios';\nimport CategoryChart from '../DataChart/CategoryChart';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n//this component filters existing games by category, specific to each user\n\nclass CategoryPage extends Component {\n\n    state = {\n        games: [],\n        categories: [],\n    }\n\n    //gets all games that haven't been set to a specific category on mount\n    //also gets the existing categories for the selector from the DB\n    componentDidMount() {\n        axios.get(`/category/all/1`)\n        .then((response) => {\n            this.setState({\n                games: response.data\n            })\n        })\n        .catch(() => {\n            console.log('error getting all games');\n        })\n        axios.get('/category/list')\n        .then((response) => {\n            this.setState({\n                categories: response.data\n            })\n        })\n        .catch(() => {\n            console.log('error getting categories');\n        })\n        this.props.dispatch({type: 'GET_CATEGORY_DATA', payload: 1})\n    };//end mount\n\n\n    //this retrieves the games in the user-selected category\n    getRequestedGames = (event) => {\n        axios.get(`/category/all/${event.target.value}`)\n        .then((response) => {\n            this.setState({\n                games: response.data\n            })\n        })\n        .catch(() => {\n            console.log('error getting all games');\n        })\n        this.props.dispatch({type: 'GET_CATEGORY_DATA', payload: event.target.value})\n    };//end getRequestedGames\n\n    //sets the selected game to the the current game to be displayed\n    //and moves the user to the game page to display stats for that game\n    //and also sets the current user to an active player\n    displayGameClick = (game) => {\n        this.props.history.push('/gamepage');\n        this.props.dispatch({type: 'SELECT_GAME', payload: game});\n        this.props.dispatch({type: 'SET_USER_PLAYER', payload: this.props.state.user});\n    };//end displayGameClick\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <InputLabel htmlFor=\"cat\">Category</InputLabel>\n                    <Select onChange={this.getRequestedGames} value=\"category\" id=\"cat\">\n                        {this.state.categories.map( category => (\n                            <option key={category.id} value={category.id}>\n                                {category.category_name}\n                            </option>\n                        ))}\n                    </Select>\n                </div>\n                <div className=\"gameList\">\n                    <CategoryChart />\n                    {this.state.games.map( game => (\n                        <div key={game.id} onClick={() => this.displayGameClick(game)} id=\"gameCard\">\n                            <AddGameCards game={game} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({state});\n\nexport default connect(mapStateToProps)(CategoryPage);\n\n","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\n\nimport NavBar from '../NavBar/NavBar';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport UserPage from '../UserPage/UserPage';\nimport AddGame from '../AddGame/AddGame';\nimport GamePage from '../GamePage/GamePage';\nimport InstancePage from '../InstancePage/InstancePage';\nimport ResultsPage from '../ResultsPage/ResultsPage';\nimport CategoryPage from '../CategoryPage/CategoryPage';\nimport './App.css';\n\n//component handles getting users, and setting up the routes for navigating\n\n\nclass App extends Component {\n\n  //gets current user on initial mount\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'});\n  };//end lifecycle\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <NavBar history={this.props.history} />\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/home\" />\n            <ProtectedRoute exact path=\"/home\" component={UserPage} />\n            <ProtectedRoute exact path=\"/addgame\" component={AddGame} />\n            <ProtectedRoute exact path=\"/gamepage\" component={GamePage} />\n            <ProtectedRoute exact path=\"/playgame\" component={InstancePage} />\n            <ProtectedRoute exact path=\"/results\" component={ResultsPage} />\n            <ProtectedRoute exact path=\"/categories\" component={CategoryPage} />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n        </div>\n      </Router>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}